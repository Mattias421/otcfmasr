# #################################
# Basic training parameters for enhancement.
#
# Authors:
#  * Szu-Wei Fu 2020
#  * Chien-Feng Liao 2020
#  * Peter Plantinga 2020, 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 4234
__set_seed: !apply:speechbrain.utils.seed_everything [!ref <seed>]

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`
# If you plan to train a system on an HPC cluster with a big dataset,
# we strongly suggest doing the following:
# 1- Compress the dataset in a single tar or zip file.
# 2- Copy your dataset locally (i.e., the local disk of the computing node).
# 3- Uncompress the dataset in the local folder.
# 4- Set data_folder with the local path.
# Reading data from the local disk of the compute node (e.g. $SLURM_TMPDIR with SLURM-based clusters) is very important.
# It allows you to read the data much faster without slowing down the shared filesystem.
data_folder: ./data
trial_id: default
output_folder: !ref ./results/<trial_id>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.
train_annotation: !ref <save_folder>/train.json
valid_annotation: !ref <save_folder>/valid.json
test_annotation: !ref <save_folder>/test.json
skip_prep: False

validate_every: 5

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.WandBLogger
    initializer: !name:wandb.init
        name: !ref <trial_id>
        project: otcfmasr
        dir: !ref <output_folder>/wandb
        config:
          batch_size: !ref <batch_size>
          learning_rate: !ref <learning_rate>


# whisper settings
whisper_hub: openai/whisper-tiny
freeze_encoder: true
whisper_folder: !ref ./pretrained_models/<whisper_hub>
sampling_rate: 16_000

whisper: !new:speechbrain.lobes.models.huggingface_transformers.whisper.Whisper
    source: !ref <whisper_hub>
    freeze_encoder: !ref <freeze_encoder>
    save_path: !ref <whisper_folder>
    language: "english"
    task: "transcribe"
    sampling_rate: !ref <sampling_rate>

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
test_beam_size: 8

valid_search: !new:speechbrain.decoders.seq2seq.S2SWhisperGreedySearcher
    model: !ref <whisper>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>

test_search: !new:speechbrain.decoders.seq2seq.S2SWhisperBeamSearcher
    module: [!ref <whisper>]
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>


# CFM settings
cfm_sigma: 0.1
flow_matcher: !new:torchcfm.conditional_flow_matching.ConditionalFlowMatcher
    sigma: !ref <cfm_sigma>


# Training Parameters
number_of_epochs: 20
batch_size: 64
batch_size_eval: 32
learning_rate: 0.0001
num_workers: 4
dataloader_options:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
dataloader_options_eval:
    batch_size: !ref <batch_size_eval>
    num_workers: !ref <num_workers>


# Model
num_layers: 4
dropout: 0.05
attention_type: RoPEMHA

model: !new:speechbrain.lobes.models.transformer.Transformer.TransformerEncoder
    num_layers: !ref <num_layers>
    nhead: 6
    d_ffn: 1536
    d_model: 384
    attention_type: !ref <attention_type>
    activation: !name:torch.nn.GELU
    dropout: !ref <dropout>

# metrics
wer_stats: !new:speechbrain.utils.metric_stats.ErrorRateStats
cer_stats: !new:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    model: !ref <model>

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
    lr: !ref <learning_rate>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        counter: !ref <epoch_counter>

ckpt_enable: true
test: true

# hopt
hpopt_mode: null
hpopt: null
